; The 'fun' function definition, arguably the most important one in the standard library
(def {fun} (fn {n e} {def (head n) (fn (tail n) e)}))

; Generally useful variable definitions
(def {true} 1)
(def {false} 0)
(def {nil} {})
(def {else} true)

(fun {not b} {if b {false} {true}})
(fun {or & bs} {
    select
        {(= (len bs) 1) (first bs)}
        {(first bs) true}
        {else (curry or (tail bs))}
})

(fun {even n} {= (% n 2) 0})
(fun {odd n} {= (% n 2) 1})

(fun {curry f xs} {eval (join (list f) xs)})
(fun {uncurry f & xs} {f xs})

; List generation / Alteration
(fun {range f t} {
    if (= f t)
        {list f}
        {join (list f) (range (+ f 1) t)}
})

(fun {map f xs} {
    if (= xs nil)
        {nil}
        {join (list (f (first xs))) (map f (tail xs))}
})

(fun {filter f xs} {
    if (= xs nil)
        {nil}
        {if (f (first xs))
            {join (head xs) (filter f (tail xs))}
            {filter f (tail xs)}}
})

(fun {append l & xs} {join l xs})
(fun {prepend l & xs} {join xs l})

(fun {first xs} {eval (head xs)})
(fun {second xs} {eval (head (tail xs))})
(fun {last xs} {eval (post xs)})

(fun {drop n xs} {
    if (= n 0)
        {xs}
        {drop (- n 1) (tail xs)}
})

(fun {dropLast n xs} {
    if (= n 0)
        {xs}
        {dropLast (- n 1) (init xs)}
})

(fun {len xs} {
    if (= xs nil)
        {0}
        {+ 1 (len (tail xs))}
})

; String functions
(fun {strLen s} {
    if (= s "")
        {0}
        {+ 1 (strLen (tail s))}
})

(fun {startsWith s c} {
    select
        {(= c "") true}
        {(= s "") false}
        {(= (head s) (head c)) (startsWith (tail s) (tail c))}
        {else false}
})

(fun {contains s c} {
    select
        {(= s "") false}
        {(startsWith s c) true}
        {else (contains (tail s) c)}
})

(fun {indexOf s c} {
    select
        {(= s "") -9999}
        {(startsWith s c) 0}
        {else (+ 1 (indexOf (tail s) c))}
})

(fun {tokenize s} {
    if (= s "")
        {{}}
        {join (list (head s)) (tokenize (tail s))}
})

(fun {split s p} {
    select
        {(= s "") {}}
        {(not (contains s p)) (list s)}
        {(startsWith s p) (split (drop (strLen p) s) p)}
        {else (prepend (split (drop (indexOf s p) s) p) (dropLast (- (strLen s) (indexOf s p)) s))}
})

; Comparison conditional functions
(fun {select & xs} {
    if (first (first xs))
        {second (first xs)}
        {curry select (tail xs)}
})

(fun {switch n & xs} {
    if (= (first (first xs)) n)
        {second (first xs)}
        {curry switch (join (list n) (tail xs))}
})

; Some fun math functions
(fun {factorial n} {
    if (= n 0)
        {1}
        {* n (factorial (- n 1))}
})

(fun {fibonacci n} {
    select
        {(= n 0) 0}
        {(= n 1) 1}
        {else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))}
})
