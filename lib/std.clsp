; The 'fun' function definition, arguably the most important one in the standard library
(def {fun} (fn {n e} {def (head n) (fn (tail n) e)}))

; Generally useful variable definitions
(def {true} 1)
(def {false} 0)
(def {nil} {})
(def {else} true)

(fun {even n} {= (% n 2) 0})
(fun {odd n} {= (% n 2) 1})

(fun {curry f xs} {eval (join (list f) xs)})
(fun {uncurry f & xs} {f xs})

; List generation / Alteration
(fun {range f t} {
    if (= f t)
        {list f}
        {join (list f) (range (+ f 1) t)}
})

(fun {map f xs} {
    if (= xs nil)
        {nil}
        {join (list (f (first xs))) (map f (tail xs))}
})

(fun {filter f xs} {
    if (= xs nil)
        {nil}
        {if (f (first xs))
            {join (head xs) (filter f (tail xs))}
            {filter f (tail xs)}}
})

(fun {first xs} {eval (head xs)})
(fun {second xs} {eval (head (tail xs))})
(fun {last xs} {eval (post xs)})

(fun {drop n xs} {
    if (= n 0)
        {xs}
        {drop (- n 1) (tail xs)}
})

(fun {dropLast n xs} {
    if (= n 0)
        {xs}
        {dropLast (- n 1) (init xs)}
})

(fun {len xs} {
    if (= xs {})
        {0}
        {+ 1 (len (tail xs))}
})

; String functions
(fun {startsWith s c} {
    select
        {(= c "") true}
        {(= s "") false}
        {(= (head s) (head c)) (startsWith (tail s) (tail c))}
        {else false}
})

(fun {contains s c} {
    select
        {(= s "") false}
        {(startsWith s c) true}
        {else (contains (tail s) c)}
})

; Comparison conditional functions
(fun {select & xs} {
    if (first (first xs))
        {second (first xs)}
        {curry select (tail xs)}
})

(fun {switch n & xs} {
    if (= (first (first xs)) n)
        {second (first xs)}
        {curry switch (join (list n) (tail xs))}
})

; Some fun math functions
(fun {factorial n} {
    if (= n 0)
        {1}
        {* n (factorial (- n 1))}
})

(fun {fibonacci n} {
    select
        {(= n 0) 0}
        {(= n 1) 1}
        {else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))}
})
